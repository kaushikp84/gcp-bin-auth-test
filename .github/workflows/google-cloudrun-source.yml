# Created by: kaushikdbg
# Last updated: 2025-05-02 10:30:00 UTC

name: 'Build, Scan, and Sign Docker Image with Direct WIF Authentication'

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  ATTESTOR_ID: ${{ secrets.GCP_ATTESTOR_ID }}
  KEY_LOCATION: ${{ secrets.GCP_KEY_LOCATION }}
  KEYRING: ${{ secrets.GCP_KEYRING }}
  KEY_NAME: ${{ secrets.GCP_KEY_NAME }}
  KEY_VERSION: ${{ secrets.GCP_KEY_VERSION }}
  IMAGE_NAME: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/artifact-scanning-repo/sample-image

jobs:
  deploy:
    runs-on: 'ubuntu-latest'
    
    permissions:
      contents: 'read'
      id-token: 'write'  # Required for Workload Identity Federation authentication
    
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' #actions/checkout@v4
      
      - id: 'auth'
        name: 'Authenticate to Google Cloud using Direct Workload Identity Federation'
        uses: 'google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2'
        with:
          workload_identity_provider: 'projects/751456426809/locations/global/workloadIdentityPools/github/providers/my-repo'
          
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        
      - name: 'Configure Docker for Artifact Registry'
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
      
      - name: 'Build Docker image'
        id: 'build'
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .
          
      - name: 'Push Docker image for scanning'
        run: |
          docker push ${{ env.IMAGE_NAME }}
          
      - name: 'Run vulnerability scan'
        id: 'scan'
        run: |
          SCAN_ID=$(gcloud artifacts docker images scan \
            ${{ env.IMAGE_NAME }} \
            --location us \
            --project=${{ env.PROJECT_ID }} \
            --quiet \
            --format="value(response.scan)")
          echo "SCAN_ID=$SCAN_ID" >> $GITHUB_ENV
          echo "Scan ID: $SCAN_ID"
      
      - name: 'Check severity of vulnerabilities'
        id: 'severity-check'
        run: |
          # First, let's save the full output to examine
          echo "Fetching vulnerability data..."
          VULN_OUTPUT=$(gcloud artifacts docker images list-vulnerabilities ${{ env.SCAN_ID }} --format="json")
          
          # Debug: Print the number of total vulnerabilities
          echo "Total vulnerabilities found: $(echo $VULN_OUTPUT | jq '. | length')"
          
          # Check specifically for CRITICAL vulnerabilities in non-OS packages
          CRITICAL_COUNT=$(echo $VULN_OUTPUT | jq '[.[] | select(.vulnerability.effectiveSeverity == "CRITICAL"] | length')
          echo "Critical non-OS vulnerabilities count: $CRITICAL_COUNT"
          
          # If there are critical vulnerabilities, show details and fail
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "Critical vulnerabilities found"
          else
            echo "No CRITICAL vulnerability found in non-OS packages, congrats!"
          fi
      
      - name: 'Retag Docker image'
        if: success()
        run: |
          docker tag ${{ env.IMAGE_NAME }} ${{ env.IMAGE_NAME }}:good
      
      - name: 'Push tagged Docker image'
        if: success()
        run: |
          docker push ${{ env.IMAGE_NAME }}:good
      
      - name: 'Sign the image (Create attestation)'
        if: success()
        run: |
          gcloud beta container binauthz attestations sign-and-create \
            --artifact-url="${{ env.IMAGE_NAME }}:good" \
            --attestor="projects/${{ env.PROJECT_ID }}/attestors/${{ env.ATTESTOR_ID }}" \
            --keyversion="projects/${{ env.PROJECT_ID }}/locations/${{ env.KEY_LOCATION }}/keyRings/${{ env.KEYRING }}/cryptoKeys/${{ env.KEY_NAME }}/cryptoKeyVersions/${{ env.KEY_VERSION }}"
      
      - name: 'Deploy to Cloud Run'
        uses: 'google-github-actions/deploy-cloudrun@33553064113a37d688aa6937bacbdc481580be17' # google-github-actions/deploy-cloudrun@v2
        with:
          service: '${{ env.SERVICE }}'
          project_id: '${{ env.PROJECT_ID }}'
          region: '${{ env.REGION }}'
          # NOTE: If using a different source folder, update the image name below:
          image: '${{ env.IMAGE_NAME }}:good'
          flags: '--binary-authorization=default'

      # If required, use the Cloud Run URL output in later steps
      - name: 'Show output'
        run: |-
          echo ${{ steps.deploy.outputs.url }}
